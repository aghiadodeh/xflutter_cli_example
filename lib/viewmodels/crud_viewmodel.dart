/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import '../models/responses/base_response/base_response.dart';
import '../models/responses/list_response/list_response.dart';
import '../repositories/base_repository.dart';
import '../local/isar/isar_base_data_source.dart';
import '../events/event_emitter.dart';
import 'base_viewmodel.dart';

abstract class CrudViewModel<T extends Object, ID> extends BaseViewModel with PaginationViewModel<T> {
  final _eventEmitter = Lazy(() => EventEmitter<PaginationState<List<T>>>());
  EventEmitter<PaginationState<List<T>>> get eventEmitter => _eventEmitter.value;

  IsarBaseDataSource<T, ID> get dataSource;
  BaseRepository get repository;

  /// call your http request to fetch data
  Future<BaseResponse<ListResponse<T>>> httpResponse(int page);

  /// get [ID] value of [T] object,
  /// which mean get the unique key value from the object.
  ID? objectId(T item);

  /// set your filters key-value -> { "name": "John" }
  Map<String, dynamic> get filters => {};

  @override
  void onReady() {
    super.onReady();
    listen();
    getPaginationList();
  }

  /// add new [T]
  void insert(T item) {
    dataSource.insert(item);
    insertItem(0, item, 1);
  }

  /// update [T] object
  void update(T item) {
    final id = objectId(item);
    final list = paginationParams.itemsList.value;
    final index = list.indexWhere((e) => objectId(e.item) == id);
    if (index != -1) {
      dataSource.insert(item);
      deleteItem(index);
      insertItem(index, item, list[index].page);
    }
  }

  /// fetch [T] list with pagination
  void findAll(int page) {
    // emit loading to ui
    eventEmitter.emitValue(const PaginationLoading());

    // get cached data from local-database
    final data = dataSource.findByPage(page, filters: filters);
    if (data.isNotEmpty) {
      eventEmitter.emitValue(PaginationSuccess<List<T>>(data, cached: true));
    }

    // fetch data from server
    callHttpRequest<ListResponse<T>>(
      () => httpResponse(page),
      callback: (result, success) {
        if (result?.data != null) {
          eventEmitter.emitValue(PaginationSuccess<List<T>>(result!.data!));
          setTotal(result.total ?? result.data!.length);
        } else {
          eventEmitter.emitValue(const PaginationError());
        }
      },
    );
  }

  /// delete [T] item
  void delete(T item) {
    final id = objectId(item);
    final index = paginationParams.itemsList.value.indexWhere((e) => objectId(e.item) == id);
    if (index != -1) {
      dataSource.delete(id);
      deleteItem(index);
    }
  }

  @override
  Future<void> fetchData(int page) async {
    findAll(page);
  }

  @override
  bool areItemsTheSame(T a, T b) => objectId(a) == objectId(b);

  @override
  Stream<PaginationState<List<T>>> streamSubscription() => eventEmitter.result;

  @override
  void onDispose() {
    eventEmitter.dispose();
    repository.dispose();
    dispose();
    super.onDispose();
  }
}
