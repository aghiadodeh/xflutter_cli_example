/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'package:easy_localization/easy_localization.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:xflutter_cli_example/models/ui_models/ui_message.dart';
import 'package:xflutter_cli_example/ui/core/events/bus_events.dart';
import 'package:xflutter_cli_example/ui/widgets/singleton/singleton_state.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'base_params.dart';

abstract class BaseViewModel extends LifeCycle {
  final _baseParams = Lazy(() => BaseParams());
  BaseParams get baseParams => _baseParams.value;

  Future<void> callHttpRequest(Future Function() request) async {
    // hide soft keyboard
    eventBus.fire(const SoftKeyboardEvent());

    // check if connecting to internet
    bool isOnline = await isConnectingToInternet();
    if (isOnline) {
      // notify ui to show loader
      baseParams.loading.postValue(true);

      // call http request
      await request.call();

      // hide loader
      baseParams.loading.postValue(false);
    } else {
      // notify error message
      baseParams.uiMessage.postValue(UiMessage(message: "check_internet_connection".tr()));
    }
  }
}

/// controlled from you custom widget or [SingletonState]
abstract class LifeCycle {
  /// Called immediately after the widget is allocated in memory.
  void onInit() {}

  /// Called 1 frame after onInit(). It is the perfect place to enter
  /// navigation events, like snackBar, dialogs, or a new route
  void onReady() {}

  /// Called immediately before the widget is disposed
  void onDispose() {}
}

/// check if device connecting to internet (wifi or mobile-data)
Future<bool> isConnectingToInternet() async {
  final connectivityResult = await (Connectivity().checkConnectivity());
  return connectivityResult == ConnectivityResult.mobile || connectivityResult == ConnectivityResult.wifi;
}
