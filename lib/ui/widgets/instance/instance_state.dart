/// Generated By XFlutter Cli.
/// 
/// more info: https://xflutter-cli.aghiadodeh.com
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:xflutter_cli_example/config/instance_config.dart';
import 'package:xflutter_cli_example/viewmodels/base_viewmodel.dart';
import 'instance_builder.dart';

/// Create a global instance when widget state initialized,
/// and remove the instance when widget destroyed.
///
/// this make you can access the same instance from your widget children without pass any variables.
///
/// just wrap your child widget in [InstanceBuilder].
mixin InstanceState<T extends StatefulWidget, VM extends BaseViewModel> on State<T> implements StateObserver<T> {
  late VM instance;

  String? instanceName;

  /// new instance from you class.
  VM registerInstance();

  /// callback when widget initialized.
  void onInitState(VM instance) {}

  /// callback when widget destroyed.
  void onDispose() {}

  /// observe on live data variables
  void observeLiveData(StateObserver<StatefulWidget> stateObserver, VM instance) {}

  @override
  void initState() {
    instance = registerInstance();
    putInstance<VM>(instance, instanceName: instanceName);
    onInitState(instance);
    instance.onInit();
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => instance.onReady());
  }

  @override
  FutureOr<void> registerObservers() {
    observeLiveData(this, instance);
  }

  @override
  void dispose() {
    onDispose();
    instance.onDispose();
    destroyInstance<VM>(instanceName: instanceName);
    super.dispose();
  }

  /// callback which wrap your widgets
  Widget screen(BuildContext context, VM instance);

  @override
  Widget build(BuildContext context) {
    return screen(context, instance);
  }
}
