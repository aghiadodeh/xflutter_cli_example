/// Generated By XFlutter Cli.
/// 
/// more info: https://xflutter-cli.aghiadodeh.com
import 'dart:async';
import 'package:flutter/material.dart';
import 'instance_state.dart';
import 'package:xflutter_cli_example/config/instance_config.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:xflutter_cli_example/viewmodels/base_viewmodel.dart';

/// wrap your [StatefulWidget] children widgets with the same global instance which registered in [InstanceState].
///
/// no more passing variables from parent to children.
///
/// just create instance in the parent in use this instance in the children widgets.
mixin InstanceUse<T extends StatefulWidget, VM extends BaseViewModel> on State<T> implements ObserverMixin {
  late VM viewModel;
  String? instanceName;

  @override
  void initState() {
    viewModel = findInstance<VM>(instanceName: instanceName);
    super.initState();
    onInitState();
    WidgetsBinding.instance.addPostFrameCallback((_) => doRegister());
  }

  @override
  void dispose() {
    doUnregister();
    onDispose();
    super.dispose();
  }

  /// callback when widget initialized.
  void onInitState() {}

  /// callback when widget destroyed.
  void onDispose() {}

  /// observe live data variables
  void observeLiveData(ObserverMixin observer) {}

  @override
  FutureOr<void> registerObservers() {
    observeLiveData(this);
  }

  /// callback which wrap your widgets
  Widget screen(BuildContext context, VM viewModel);

  @override
  Widget build(BuildContext context) {
    return screen(context, viewModel);
  }
}

