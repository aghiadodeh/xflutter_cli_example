/// Generated By XFlutter Cli.
/// 
/// more info: https://xflutter-cli.aghiadodeh.com
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:xflutter_cli_example/config/singleton_config.dart';
import 'singleton_widget.dart';

class SingletonInstance<T extends Object> extends StatefulWidget {
  /// new instance from you class.
  final T instance;

  /// callback which wrap your widgets with the global instance.
  final Widget Function(T singleton) builder;

  /// callback when widget initialized.
  final Function(T)? initState;

  /// callback when widget destroyed.
  final Function(T)? dispose;

  /// observe on live data variables
  final Function(StateObserver<StatefulWidget>, T)? registerObservers;

  /// Create a global instance when widget state initialized,
  /// and remove the instance when widget destroyed.
  ///
  /// this make you can access the same instance from your widget children without pass any variables.
  ///
  /// just wrap your child widget in [SingletonWidget].
  const SingletonInstance({
    required this.instance,
    required this.builder,
    this.initState,
    this.dispose,
    this.registerObservers,
    Key? key,
  }) : super(key: key);

  @override
  State<SingletonInstance<T>> createState() => _SingletonInstanceState<T>();
}

class _SingletonInstanceState<T extends Object> extends State<SingletonInstance<T>> with StateObserver {
  T get instance => getSingleton<T>();

  @override
  void initState() {
    registerSingleton<T>(widget.instance);
    widget.initState?.call(instance);
    super.initState();
  }

  @override
  void dispose() {
    widget.dispose?.call(instance);
    unregisterSingleton<T>();
    super.dispose();
  }

  @override
  FutureOr<void> registerObservers() {
    widget.registerObservers?.call(this, instance);
  }

  @override
  Widget build(BuildContext context) {
    return widget.builder.call(instance);
  }
}
