/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com

import 'package:isar/isar.dart';
import '../../models/data_models.dart';
import '../../network/config/env.dart';
import '../utils/isar_utils.dart';
import '../models/product/product.dart';
import 'isar_base_data_source.dart';

class IsarProductDataSource extends IsarBaseDataSource<Product, int> {
  /// [Product] query builder with pagination
  QueryBuilder<IsarProduct, IsarProduct, QAfterLimit> _productQueryBuilder({int? page, Map<String, dynamic> filters = const {}}) {
    return isar.isarProducts.where().optional(page != null, (q) => q.offset(offset(page)).limit(Env.perPage));
  }

  /// find [Product] from local-database
  @override
  Product? findOne(int? id) {
    return isar.isarProducts.where().idEqualTo(id).findFirstSync()?.fromIsar();
  }

  /// fetch cached [Product] list without pagination from local-database
  @override
  List<Product> findAll({Map<String, dynamic> filters = const {}}) {
    return _productQueryBuilder(filters: filters).findAllSync().map((e) => e.fromIsar()).toList();
  }

  /// get cached [Product] list with pagination from local-database
  @override
  List<Product> findByPage(int page, {Map<String, dynamic> filters = const {}}) {
    final data = _productQueryBuilder(page: page, filters: filters).findAllSync();
    return data.map((e) => e.fromIsar()).toList();
  }

  /// add/update [Product] into local-database
  @override
  void insert(Product product) {
    isar.writeTxnSync(() => isar.isarProducts.putByIdSync(product.toIsar()));
  }

  /// save list of [Product] in local-database
  @override
  void insertAll(List<Product> data) {
    final objects = data.map((e) => e.toIsar()).toList();
    final local = findAll().map((e) => e.id).toList();
    final ids = data.map((e) => e.id).toList();
    final difference = local.where((element) => !ids.contains(element)).toList();
    isar.writeTxnSync(() {
      // delete difference between local and fetched list
      isar.isarProducts.deleteAllByIdSync(difference);

      // save new data
      isar.isarProducts.putAllByIdSync(objects);
    });
  }

  /// delete [Product] from local-database
  @override
  void delete(int? id) {
    isar.writeTxnSync(() => isar.isarProducts.deleteByIdSync(id));
  }
}
