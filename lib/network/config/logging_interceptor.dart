/// Generated By XFlutter Cli.
///
/// more info: https://xflutter-cli.aghiadodeh.com
import 'dart:async';
import 'package:dio/dio.dart';
import 'logger.dart';

const interceptorLogName = "HTTP Interceptor";

class LoggingInterceptor extends Interceptor {
  @override
  FutureOr<dynamic> onRequest(RequestOptions options, RequestInterceptorHandler handler) async {
    log('REQUEST', name: interceptorLogName);

    log("--> ${options.method.toUpperCase()} ${options.baseUrl}${options.path}", name: interceptorLogName);

    log("Request Headers:", name: interceptorLogName);

    options.headers.forEach((k, v) {
      log('$k: $v', name: interceptorLogName);
    });
    log('------------------------------------------------------', name: interceptorLogName);

    log("Request queryParameters:", name: interceptorLogName);
    options.queryParameters.forEach((k, v) {
      log('$k: $v', name: interceptorLogName);
    });
    log('------------------------------------------------------', name: interceptorLogName);

    if (options.data != null) {
      log("Body: ${options.data}", name: interceptorLogName);
    }
    log('------------------------------------------------------', name: interceptorLogName);

    log("--> END ${options.method.toUpperCase()}", name: interceptorLogName);

    return handler.next(options);
  }

  @override
  void onError(DioError err, ErrorInterceptorHandler handler) {
    log('Response ERROR:', name: interceptorLogName);

    log("<-- ${err.message} ${(err.response?.requestOptions != null ? (err.response!.requestOptions.baseUrl + err.response!.requestOptions.path) : 'URL')}",
        name: interceptorLogName);

    log("${err.response != null ? err.response?.data : 'Unknown Error'}", name: interceptorLogName);

    log("<-- End error", name: interceptorLogName);

    return handler.next(err);
  }

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    log('RESPONSE:', name: interceptorLogName);

    log("<-- ${response.statusCode} ${((response.requestOptions.baseUrl + response.requestOptions.path))}", name: interceptorLogName);

    log("Headers:", name: interceptorLogName);
    response.headers.forEach((k, v) {
      log('$k: $v', name: interceptorLogName);
    });
    log('------------------------------------------------------', name: interceptorLogName);

    log('Response: ${response.data}', name: interceptorLogName);

    log("<-- END HTTP", name: interceptorLogName);
    log('------------------------------------------------------', name: interceptorLogName);
    return handler.next(response);
  }
}
