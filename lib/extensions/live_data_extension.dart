/// Generated By XFlutter Cli.
/// 
/// more info: https://xflutter-cli.aghiadodeh.com
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'async_extension.dart';

extension LiveDataUtils<T> on LiveData<T> {
  /// Ignore all changes in [callback] during [duration] (0.5 sec by default)
  /// and sends the last value after [duration]
  ObserverWrapper<T> debounce(void Function(T) callback, {Duration duration = const Duration(milliseconds: 500)}) {
    final debouncer = Debouncer(delay: duration);
    void onChange(value) => debouncer(() => callback(value));
    ObserverWrapper<T>? observerWrapper = ObserverWrapper<T>(this, onChange, Dispatcher.postFrame);
    addObserverWrapper(observerWrapper);
    return observerWrapper;
  }
}

extension Utils<T> on T {
  /// create new [MutableLiveData] instance with initialValue from passed variable value
  MutableLiveData<T> get liveData => MutableLiveData<T>(initialValue: this);

  /// create new [LiveResult] instance with initialValue [ResultState.idle]
  LiveResult<T> get liveResult => LiveResult(initialState: ResultState.idle);

  /// create new [MutableMediatorLiveData] instance with initialValue from passed variable value
  MutableMediatorLiveData<T> get mediatorLiveData => MutableMediatorLiveData<T>(initialValue: this);
}
